package com.lxvoice.domain.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lxvoice.domain.greendao.entity.Book;
import com.lxvoice.domain.greendao.main.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK".
*/
public class BookDao extends AbstractDao<Book, Long> {

    public static final String TABLENAME = "BOOK";

    /**
     * Properties of entity Book.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Author = new Property(1, String.class, "author", false, "AUTHOR");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Text_number = new Property(3, Long.class, "text_number", false, "TEXT_NUMBER");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Depict = new Property(5, String.class, "depict", false, "DEPICT");
        public final static Property Ctime = new Property(6, java.util.Date.class, "ctime", false, "CTIME");
        public final static Property Utime = new Property(7, java.util.Date.class, "utime", false, "UTIME");
    }


    public BookDao(DaoConfig config) {
        super(config);
    }
    
    public BookDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AUTHOR\" TEXT," + // 1: author
                "\"TYPE\" TEXT," + // 2: type
                "\"TEXT_NUMBER\" INTEGER," + // 3: text_number
                "\"NAME\" TEXT," + // 4: name
                "\"DEPICT\" TEXT," + // 5: depict
                "\"CTIME\" INTEGER," + // 6: ctime
                "\"UTIME\" INTEGER);"); // 7: utime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        Long text_number = entity.getText_number();
        if (text_number != null) {
            stmt.bindLong(4, text_number);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String depict = entity.getDepict();
        if (depict != null) {
            stmt.bindString(6, depict);
        }
 
        java.util.Date ctime = entity.getCtime();
        if (ctime != null) {
            stmt.bindLong(7, ctime.getTime());
        }
 
        java.util.Date utime = entity.getUtime();
        if (utime != null) {
            stmt.bindLong(8, utime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Book entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(2, author);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(3, type);
        }
 
        Long text_number = entity.getText_number();
        if (text_number != null) {
            stmt.bindLong(4, text_number);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String depict = entity.getDepict();
        if (depict != null) {
            stmt.bindString(6, depict);
        }
 
        java.util.Date ctime = entity.getCtime();
        if (ctime != null) {
            stmt.bindLong(7, ctime.getTime());
        }
 
        java.util.Date utime = entity.getUtime();
        if (utime != null) {
            stmt.bindLong(8, utime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Book readEntity(Cursor cursor, int offset) {
        Book entity = new Book( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // author
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // type
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // text_number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // depict
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // ctime
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // utime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Book entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAuthor(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setText_number(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepict(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCtime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUtime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Book entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Book entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Book entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
